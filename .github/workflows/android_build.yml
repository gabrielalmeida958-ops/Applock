name: Android Build

on:
  workflow_dispatch:

env:
  ZIP_NAME: AppLockerMVP_camuflado.zip   # << nome do ZIP que você subiu
  PROJECT_DIR: project

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # JDK 17 para instalar SDK/Build-Tools com segurança
      - name: Set up JDK 17 for Android SDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android packages
        run: |
          sdkmanager --install \
            "platform-tools" \
            "platforms;android-30" "build-tools;30.0.3" \
            "platforms;android-29" "build-tools;29.0.3" \
            "platforms;android-34" "build-tools;34.0.0"
          yes | sdkmanager --licenses

      - name: Unzip project
        run: |
          unzip -q "${{ env.ZIP_NAME }}" -d "${{ env.PROJECT_DIR }}"

      # Descobre versão do Android Gradle Plugin (AGP) para decidir JDK
      - name: Detect AGP version
        id: detect
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -e
          AGP_VER=$(grep -RhoE "com\.android\.tools\.build:gradle:[0-9]+\.[0-9]+(\.[0-9]+)?" . | head -1 | sed -E 's/.*gradle:([0-9]+\.[0-9]+(\.[0-9]+)?).*/\1/')
          echo "agp=$AGP_VER" >> "$GITHUB_OUTPUT"

      # Escolhe o JDK com base no AGP (4.x/7.x = JDK 11, 8.x+ = JDK 17)
      - name: Pick JDK for build
        id: pickjdk
        shell: bash
        run: |
          set -e
          AGP="${{ steps.detect.outputs.agp }}"
          # padrão
          JDK=17
          if [[ "$AGP" =~ ^4\. || "$AGP" =~ ^7\. ]]; then
            JDK=11
          fi
          echo "jdk=$JDK" >> "$GITHUB_OUTPUT"

      - name: Set up JDK for build
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ steps.pickjdk.outputs.jdk }}

      # Instala via SDKMAN um Gradle que vamos usar só para gerar o wrapper
      # (evita pegar Gradle 9/10 do runner)
      - name: Install Gradle 7.6.1 via SDKMAN
        run: |
          curl -s https://get.sdkman.io | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install gradle 7.6.1

      # Gera/garante o wrapper usando SEMPRE o Gradle 7.6.1
      - name: Ensure Gradle wrapper (Gradle 7.6.1)
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -e
          if [ ! -f gradlew ]; then
            "$HOME/.sdkman/candidates/gradle/current/bin/gradle" wrapper --gradle-version 7.6.1
          else
            # Mesmo que exista, força o wrapper para 7.6.1 para não cair no Gradle 9/10
            "$HOME/.sdkman/candidates/gradle/current/bin/gradle" wrapper --gradle-version 7.6.1
          fi
          chmod +x gradlew

      - name: Build Debug APK
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          set -e
          ./gradlew --no-daemon assembleDebug --stacktrace --info

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: ${{ env.PROJECT_DIR }}/app/build/outputs/apk/debug/*.apk
